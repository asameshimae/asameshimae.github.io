<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">

    <link href="https://fonts.googleapis.com/css?family=Zilla+Slab" rel="stylesheet"> 

    <style type="text/css">
    body {    
      /* Coolors Exported Palette - coolors.co/88d18a-ccddb7-6a5b6e-f0b7b3-a833b9 */
      --color1: #88d18a;     /* dark sea green */
      --color2: #ccddb7;    /* pastel grey */
      --color3: #6a5b6e;    /* dim grey */
      --color4: #f0b7b3;    /* melon */
      --color5: #a833b9;    /* dark orchid */

      background-color: var(--color3);
      color: var(--color4);

      font-family: 'Zilla Slab', serif;
      font-size: 5em;

      margin:1em 1em 1em 2em;
    }
    #card, #leaders {
      padding-left:.2em;
      min-height:2em;
      word-wrap:break-word;
      white-space:normal;
    }
    #preview {
      padding-left:1em;
      font-size: .2em;
      opacity: .5;
    }
    @media screen and (min-width: 700px) {
      #leaders { display:inline-block; }
    }
    @media screen and (max-width: 700px) {
      #leaders { display:none; }
    }
    .leadersRH {
      float:right;      
      width:9em;
      font-size: .3em;
    }
    #leaders {
      height:auto;
      padding-left:3em;
      min-height:13em;
      background-color: var(--color3);
    }
    #leaders h3 {
      font-size: 1em;
      font-weight: normal;
      color: var(--color1);
      margin:0em;
    }
    #leaders p {
      margin:.4em 0em 0em 0em;
    }
    a,a:active,a:visited {
      text-decoration: none;
      padding:.2em;
    }
    #vote {
      padding-top:.4em;
    }
    #votecontainer {
      border-top:1px dotted var(--color4);
      margin-top:.8em;
      margin-right:4em;
      font-size: .8em;
    }
    #progress {
      border-top:3px solid var(--color1);
      margin-top:-2px;
      width:0%;
    }
    #vBd { color: var(--color4); }
    #vOk { color: var(--color2); }
    #vGd { color: var(--color1); }
    #vEp { color: var(--color1); }

    #skip {
      display: none;
    }

    #bSkip { 
      color: var(--color2);
      font-size: 0.5em;
    }
    
    @keyframes animOut {
      from {opacity:1;width:9em;}
        to {opacity:0;width:8em;}
    }
    @keyframes animIn {
      from {opacity:0;width:8em;}
        to {opacity:1;width:9em;}
    }

    .animOut {
      animation-name: animOut;
      animation-duration: 2s;
    }
    .animIn {
      animation-name: animIn;
      animation-duration: 2s;  
    }
    </style>

  <title>Voterater</title>
</head>
<body>

  <div id="leaders" class="animIn leadersRH">...</div>

  <div id="card">...</div>
  <div id="preview">&nbsp;</div>

  <div id="votecontainer">
    <div id="progress"></div>
    <div id="vote">
      <a href="#" id="vBd" data-vote="0">üòû</a><a href="#" id="vOk" data-vote="1">üòê</a><a href="#" id="vGd" data-vote="2">üòä</a><a href="#" id="vEp" data-vote="4">üòÇ</a>
    </div>
  </div>

  <div id="skip">
    <a href="#" id="bSkip">¬Ø\_(„ÉÑ)_/¬Ø</a>
  </div>


  <script type="text/javascript">
    /* constants: known */
    const keyGS = 'AKfycbzSpeYhp_HZ6sncI6iHK4plCcG-VvhZYamMJFeQ7mgTI8nEhqp5' // key to the Google Sheet (prod)
    const roundels = 
      [...t='...|..:|.:.|:..|...'.split`|`,
      ...[';;;',':::',';;;'],
      ...t.reverse()] // array of ascii animation stages used when loading content
    const query = new Map(location.search.substr(1).split`&`.map(p=>p.split`=`)) // make a map out of the url query string
    const setConfigs = { 
      'bandstowns': { 
        'cardBatchSize': 50,
        'showSkip': 0,
        'shuffle': 1,
        'buttons': [
          {'id':'vBd', 'value': 0, 'text': 'üòû'},
          {'id':'vOk', 'value': 1, 'text': 'üòê'},
          {'id':'vGd', 'value': 2, 'text': 'üòä'},
          {'id':'vEp', 'value': 4, 'text': 'üòÇ'}
        ]
      }, 
      'digilab1710': { 
        'cardBatchSize': 0,
        'showSkip': 1,
        'shuffle': 0,
        'buttons': [
          {'id':'vBd', 'value': 0, 'text': 'üòû'},
          {'id':'vOk', 'value': 1, 'text': 'üòê'},
          {'id':'vGd', 'value': 2, 'text': 'üòä'},
          {'id':'vEp', 'value': 4, 'text': 'üòÑ'}
        ]
      },
      'digilab1711': { 
        'cardBatchSize': 0,
        'showSkip': 1,
        'shuffle': 0,
        'buttons': [
          {'id':'vBd', 'value': 0, 'text': 'üòû'},
          {'id':'vOk', 'value': 1, 'text': 'üòê'},
          {'id':'vGd', 'value': 2, 'text': 'üòä'},
          {'id':'vEp', 'value': 4, 'text': 'üòÑ'}
        ]
      },
      'digilab1802': { 
        'cardBatchSize': 0,
        'showSkip': 1,
        'shuffle': 0,
        'buttons': [
          {'id':'vBd', 'value': 0, 'text': 'üòû'},
          {'id':'vOk', 'value': 1, 'text': 'üòê'},
          {'id':'vGd', 'value': 2, 'text': 'üòä'},
          {'id':'vEp', 'value': 4, 'text': 'üòÑ'}
        ]
      },
      'okhe1712': { 
        'cardBatchSize': 0,
        'showSkip': 1,
        'shuffle': 0,
        'buttons': [
          {'id':'vBd', 'value': 0, 'text': 'üòû'},
          {'id':'vOk', 'value': 1, 'text': 'üòê'},
          {'id':'vGd', 'value': 2, 'text': 'üòä'},
          {'id':'vEp', 'value': 4, 'text': 'üòÑ'}
        ]
      },
      'xmassongs': { 
        'cardBatchSize': 20,
        'showSkip': 0,
        'shuffle': 1,
        'buttons': [
          {'id':'vBd', 'value': 0, 'text': 'üòû'},
          {'id':'vOk', 'value': 1, 'text': 'üòê'},
          {'id':'vGd', 'value': 2, 'text': 'üòä'},
          {'id':'vEp', 'value': 4, 'text': 'üòÑ'}
        ]
      },
      'default': { 
        'cardBatchSize': 10,
        'showSkip': 0,
        'shuffle': 1,
        'buttons': [
          {'id':'vBd', 'value': 0, 'text': 'üòû'},
          {'id':'vOk', 'value': 1, 'text': 'üòê'},
          {'id':'vGd', 'value': 2, 'text': 'üòä'},
          {'id':'vEp', 'value': 4, 'text': 'üòÇ'}
        ]
      }
    }    

    /* configuration parameters */
    const defaultSet = query.get('set') || 'bandstowns' // use the specified set, or fall back on a default. use ?set=bandstowns to specify
    const displayMode = query.get('mode') || 'vote' // 'leaderboard' will just show a massive leaderboard e.g. for a live big-screen display
    const setConfig = setConfigs[defaultSet] || setConfigs.default // load up the custom configuration for this set if poss

    /* parameters for init only - do not change */
    let roundelPos = {card:0,leaders:0} // counter for each animation
    let cardPile = [] // array of entries with metadata to vote on
    let masterDeck = [] // array of all entries if we manage to cache them, to reduce server traffic
    let leaderPile = [] // array of top voted entries for info
    let newCard = {} // current entry with metadata
    let loading = new Map([['data',true],['leaders',true]]) // are these elements still loading? (true, intervalId, then undefined when ready)

    /* simple templaters */
    const urlReq = (set=defaultSet,n=setConfig.cardBatchSize||100,shuffle=setConfig.shuffle)=>`https://script.google.com/macros/s/${keyGS}/exec?set=${set}&n=${n}&shuffle=${shuffle}` // generate the url to get more cards
    const urlLeaders = (set=defaultSet)=>`https://script.google.com/macros/s/${keyGS}/exec?set=${set}&show=leaders` // generate the url to get the leaderboard
    const urlVote = (itemid,name,vote)=>`https://script.google.com/macros/s/${keyGS}/exec?itemid=${itemid}&hash=${name.hashCode()}&vote=${vote}` // generate the url to vote for a card

    /* reusable functions */

    // SOURCE: https://stackoverflow.com/a/7616484
    String.prototype.hashCode = function() { // hash a string
      var hash=0, i, chr
      if (this.length===0) return hash
      for (i=0;i<this.length;i++) {
        chr=this.charCodeAt(i)
        hash=((hash<<5)-hash)+chr
        hash|=0 // Convert to 32bit integer
      }
      return hash;
    }

    // tee function: log object to console and return the object. useful for chaining while debugging
    const tee = obj => { console.log(obj); return obj }

    /* app-specific functions */

    // display a beautiful loading animation
    const showRoundel = elem => setInterval(()=>document.querySelector(`#${elem}`).textContent=roundels[(++roundelPos[elem])%roundels.length],120)

    // restart the pile from a specified or cached deck (e.g. unshuffled mode or lost connection)
    const loopCards = (deck=masterDeck) => cardPile.push(...deck)

    // add a new batch of cards to the bottom of the pile
    const replenishCards = (set=defaultSet) => fetch(urlReq(set))
      .then(r=>r.json())
      .then(json=>{
        cardPile.push(...tee(json).data) // add the data to the pile and log it
        if(!masterDeck.length) masterDeck = json.data // update the master deck if it is empty
        setConfig.cardBatchSize = setConfig.cardBatchSize || json.data.length // if batch size was zero, next time we will ask for however many we were given this time
      })

    const refreshLeaders = (set=defaultSet) => fetch(urlLeaders(set))
      .then(r=>r.json())
      .then(json=>{
        if(JSON.stringify(leaderPile)!=JSON.stringify(json.data)) {
          leaderPile = json.data
          displayLeaders()
        }
      })

    // update the card area with a new entry to vote on
    const drawCard = function() {

      if(cardPile.length<setConfig.cardBatchSize) {
        if(setConfig.shuffle) {
          replenishCards()
        } else loopCards()
      }

      newCard = cardPile.shift()
      if(tee(newCard)) {
        card = document.querySelector('#card')
        nextCard = document.querySelector('#preview')

        card.textContent = card.dataset.entry = newCard.entry
        card.dataset.id = newCard.id

        if(!setConfig.shuffle) { // display progress through the deck, if we're running in fixed order from a master deck
          document.querySelector('#progress').style.width=`${100-(100*cardPile.length/masterDeck.length)%100}%`
        }

        nextCard.textContent = `next: ${cardPile[0].entry}` // preview the next card

      } else replenishCards().then(r=>drawCard())
    }

    const displayLeaders = () => {
      newText = '<h3>Top rated:</h3>'+leaderPile.map(e=>`<p>${e.entry}</p>`).join``
      target = document.querySelector('#leaders')
      target.innerHTML = newText
      var clone = target.cloneNode(true);
      target.parentNode.replaceChild(clone,target);
    }

    const vote = vote => fetch(urlVote(newCard.id,newCard.entry,vote))
      .then(r=>r.json())
      .then(console.log)
      .then(drawCard())

    /* app init */
    loading.set('leaders', showRoundel('leaders'))

    refreshLeaders()
      .then(()=>clearInterval(loading.get('leaders')))
      .then(()=>displayLeaders())
      .then(()=>setInterval(()=>refreshLeaders(),10000))

    if(displayMode==='vote') {
      // set up the voting buttons
      setConfig.buttons.forEach(e=>{
        el = document.querySelector(`#${e.id}`)
        el.textContent = e.text
        el.dataset.vote = e.value
      })
      if(setConfig.showSkip) document.querySelector('#skip').style.display = 'inline-block'

      // start loading cards
      loading.set('card', showRoundel('card'))

      // add event listeners to voting buttons
      document.querySelectorAll('#vote a').forEach(e=>e.addEventListener('click',function(){
        vote(this.dataset.vote)
      }))

      // add skip event listener
      document.querySelector('#bSkip').addEventListener('click',function(){
        drawCard()
      })

      replenishCards()
        .then(()=>clearInterval(loading.get('card')))
        .then(()=>drawCard())

    } else if(displayMode==='leaderboard') {

      [...document.querySelectorAll('#card,#preview,#votecontainer')].map(e=>e.style.display='none')
      document.querySelector('#leaders').classList.remove('leadersRH')
      
    }
  </script>
</body>
</html>
